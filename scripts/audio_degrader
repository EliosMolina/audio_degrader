#!/usr/bin/env python
import os
import argparse
import audio_degrader
from audio_degrader import ParametersParser
from audio_degrader import DegradationTrim
from audio_degrader import DegradationGain
from audio_degrader import DegradationMp3
from audio_degrader import DegradationUsageDocGenerator


if __name__ == "__main__":
    main_description = "Process audio with a sequence of degradations:\n"
    main_description += '\n'.join(sorted((  # sort alphabetically
        DegradationUsageDocGenerator.get_degradation_help(
            DegradationTrim),
        DegradationUsageDocGenerator.get_degradation_help(
            DegradationMp3),
        DegradationUsageDocGenerator.get_degradation_help(
            DegradationGain),
        )))
    parser = argparse.ArgumentParser(
        description=main_description,
        formatter_class=argparse.RawTextHelpFormatter,
        epilog=("For examples of degradations see " +
                "https://github.com/EliosMolina/audio_degrader"))

    parser.add_argument('-i', '--input',
                        type=str,
                        help='Input audio wav')
    parser.add_argument('-d', '--degradations', metavar='degradation,params',
                        type=str,
                        nargs='*',
                        help='List of sequential degradations')
    parser.add_argument('-o', '--output',
                        type=str,
                        help='Output audio wav')
    parser.add_argument('-l', '--list-resources', action='store_true',
                        dest='list_resources',
                        help='List all available resources')
    args = vars(parser.parse_args())
    if (not args['input'] or
        not args['output'] or
            not args['degradations']) and not args['list_resources']:
        parser.print_help()
        exit(1)
    if args['list_resources']:
        resources_dir = os.path.join(audio_degrader.__path__[0],
                                     'resources')
        print "Available resources"
        print "Directory: {0}".format(resources_dir)
        for root, dirs, fnames in os.walk(resources_dir):
            rel_dir = os.path.relpath(root, resources_dir)
            for fname in fnames:
                if os.path.splitext(fname)[1] == '.wav':
                    print "  " + os.path.join(rel_dir, fname)

        exit(0)
